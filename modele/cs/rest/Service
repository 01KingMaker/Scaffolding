public class [Name]Service : I[Name]Service
{
    private DataContext _context;
    private readonly IMapper _mapper;

    public [Name]Service(DataContext context, IMapper mapper)
    {
        _context = context;
        _mapper = mapper;
    }

    public IEnumerable<[Name]> GetAll()
    {
        return _context.[Name]s;
    }

    public [Name] GetById(string id)
    {
        return get[Name](id);
    }

    public void Create(CreateRequest model)
    {
        // validate
        if (_context.[Name]s.Any(x => x.Email == model.Email))
            throw new AppException("[Name] with the email '" + model.Email + "' already exists");

        // map model to new [Name] object
        var [Name] = _mapper.Map<[Name]>(model);

        // hash password
        [Name].PasswordHash = BCrypt.HashPassword(model.Password);

        // save [Name]
        _context.[Name]s.Add([Name]);
        _context.SaveChanges();
    }

    public void Update(string id, UpdateRequest model)
    {
        var [Name] = get[Name](id);

        // validate
        if (model.Email != [Name].Email && _context.[Name]s.Any(x => x.Email == model.Email))
            throw new AppException("[Name] with the email '" + model.Email + "' already exists");

        // hash password if it was entered
        if (!string.IsNullOrEmpty(model.Password))
            [Name].PasswordHash = BCrypt.HashPassword(model.Password);

        // copy model to [Name] and save
        _mapper.Map(model, [Name]);
        _context.[Name]s.Update([Name]);
        _context.SaveChanges();
    }

    public void Delete(string id)
    {
        var [Name] = get[Name](id);
        _context.[Name]s.Remove([Name]);
        _context.SaveChanges();
    }

    // helper methods
    private [Name] get[Name](string id)
    {
        var [Name] = _context.[Name]s.Find(id);
        if ([Name] == null) throw new KeyNotFoundException("[Name] not found");
        return [Name];
    }
}
